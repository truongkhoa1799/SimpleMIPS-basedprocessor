module	LCD_TEST (		//	Host Side
					iCLK,iRST_N,		//iRST_N, //count,
					time_gA,time_gB,time_y,
					sel,
					//	LCD Side
					LCD_DATA,LCD_RW,LCD_EN,LCD_RS	);
//	Host Side
input			iCLK,iRST_N;
//input [6:0] count;
//input [2:0] color;
input [6:0]time_gA,time_gB,time_y;
input sel;
//	LCD Side
output	[7:0]	LCD_DATA;
output			LCD_RW,LCD_EN,LCD_RS;
//	Internal Wires/Registers
wire 	[3:0]BCD1_0,BCD1_1,BCD2_0,BCD2_1,BCD3_0,BCD3_1,BCD4_0,BCD4_1;
wire  [8:0] count_n1,count_d1;
wire  [8:0] count_n2,count_d2;
wire  [8:0] count_n3,count_d3;
wire  [8:0] count_n4,count_d4;
//////

////////
reg	[5:0]	LUT_INDEX;
reg	[8:0]	LUT_DATA;
reg	[5:0]	mLCD_ST;
reg	[17:0]	mDLY;
reg			mLCD_Start;
reg	[7:0]	mLCD_DATA;
reg			mLCD_RS;
wire		mLCD_Done;




parameter	LCD_INTIAL	=	0;
parameter	LCD_LINE1	=	5;
parameter	LCD_CH_LINE	=	LCD_LINE1+16;
parameter	LCD_LINE2	=	LCD_LINE1+16+1;
parameter	LUT_SIZE	=	LCD_LINE1+32+1;


binary_BCD convert1(time_gA+1'b1,BCD1_0,BCD1_1);
binary_BCD convert2(time_gB+1'b1+time_y+1'b1,BCD2_0,BCD2_1);
binary_BCD convert3(time_gB+1'b1,BCD3_0,BCD3_1);
binary_BCD convert4(time_gA+1'b1+time_y+1'b1,BCD4_0,BCD4_1);

LCDencoder en1(BCD1_0,count_d1);
LCDencoder en2(BCD1_1,count_n1);
LCDencoder en3(BCD2_0,count_d2);
LCDencoder en4(BCD2_1,count_n2);
LCDencoder en5(BCD3_0,count_d3);
LCDencoder en6(BCD3_1,count_n3);
LCDencoder en7(BCD4_0,count_d4);
LCDencoder en8(BCD4_1,count_n4);

always@(posedge iCLK or negedge iRST_N)
begin
	if(!iRST_N)
	begin
		LUT_INDEX	<=	0;
		mLCD_ST		<=	0;
		mDLY			<=	0;
		mLCD_Start	<=	0;
		mLCD_DATA	<=	0;
		mLCD_RS		<=	0;
	end
	else
	begin
		if(LUT_INDEX<LUT_SIZE)
		begin
			case(mLCD_ST)
			0:	begin
					mLCD_DATA	<=	LUT_DATA[7:0];
					mLCD_RS		<=	LUT_DATA[8];
					mLCD_Start	<=	1;
					mLCD_ST		<=	1;
				end
			1:	begin
					if(mLCD_Done)
					begin
						mLCD_Start	<=	0;
						mLCD_ST		<=	2;					
					end
				end
			2:	begin
					if(mDLY<18'h6FFF)
					mDLY	<=	mDLY+1'b1;
					else
					begin
						mDLY	<=	0;
						mLCD_ST	<=	3;
						
					end
				end
			3:	begin
					LUT_INDEX	<=	LUT_INDEX+1'b1;
					mLCD_ST	<=	0;
				end
			endcase
		end
	end
end

always@(*)
begin
	if(~sel) begin
		case(LUT_INDEX)
		//	Initial
		LCD_INTIAL+0:	LUT_DATA	<=	9'h038; //function set: data length 8 bits, 2 lines display, character font 5x8 dots
		LCD_INTIAL+1:	LUT_DATA	<=	9'h00C; //entire display on, cursor off, blinking off 
		LCD_INTIAL+2:	LUT_DATA	<=	9'h001;	//clear display
		LCD_INTIAL+3:	LUT_DATA	<=	9'h006; //increase cursor by 1 after writing and keep screen (not shift)
		LCD_INTIAL+4:	LUT_DATA	<=	9'h080;
		//	Line 1
		LCD_LINE1+0:	LUT_DATA	<=	9'h152;	// display: "RED A    GREEN A"
		LCD_LINE1+1:	LUT_DATA	<=	9'h145;
		LCD_LINE1+2:	LUT_DATA	<=	9'h144;
		LCD_LINE1+3:	LUT_DATA	<=	9'h120;
		LCD_LINE1+4:	LUT_DATA	<=	9'h141;
		LCD_LINE1+5:	LUT_DATA	<=	9'h120;
		LCD_LINE1+6:	LUT_DATA	<=	9'h120;
		LCD_LINE1+7:	LUT_DATA	<=	9'h120;
		LCD_LINE1+8:	LUT_DATA	<=	9'h120;
		LCD_LINE1+9:	LUT_DATA	<=	9'h147;
		LCD_LINE1+10:	LUT_DATA	<=	9'h152;
		LCD_LINE1+11:	LUT_DATA	<=	9'h145;
		LCD_LINE1+12:	LUT_DATA	<=	9'h145;
		LCD_LINE1+13:	LUT_DATA	<=	9'h14E;
		LCD_LINE1+14:	LUT_DATA	<=	9'h120;
		LCD_LINE1+15:	LUT_DATA	<=	9'h141;
		//	Change Line
		LCD_CH_LINE:	LUT_DATA	<=	9'h0C0;
		//	Line 2
		LCD_LINE2+0:	LUT_DATA	<=	9'h120;
		LCD_LINE2+1:	LUT_DATA	<=	9'h120;
		LCD_LINE2+2:	LUT_DATA	<=	9'h120;
		LCD_LINE2+3:	LUT_DATA	<=	count_n2; //time RED A
		LCD_LINE2+4:	LUT_DATA	<=	count_d2;
		LCD_LINE2+5:	LUT_DATA	<=	9'h120;
		LCD_LINE2+6:	LUT_DATA	<=	9'h120;
		LCD_LINE2+7:	LUT_DATA	<=	9'h120; 
		LCD_LINE2+8:	LUT_DATA	<=	9'h120;
		LCD_LINE2+9:	LUT_DATA	<=	9'h120;
		LCD_LINE2+10:	LUT_DATA	<=	9'h120;
		LCD_LINE2+11:	LUT_DATA	<=	9'h120;
		LCD_LINE2+12:	LUT_DATA	<=	9'h120;
		LCD_LINE2+13:	LUT_DATA	<=	9'h120;
		LCD_LINE2+14:	LUT_DATA	<=	count_n1; //time GREEN A
		LCD_LINE2+15:	LUT_DATA	<=	count_d1;
		default:		LUT_DATA	<=	9'h120;
		endcase
	end
	else begin
		case(LUT_INDEX)
		//	Initial
		LCD_INTIAL+0:	LUT_DATA	<=	9'h038;
		LCD_INTIAL+1:	LUT_DATA	<=	9'h00C;
		LCD_INTIAL+2:	LUT_DATA	<=	9'h001;
		LCD_INTIAL+3:	LUT_DATA	<=	9'h006;
		LCD_INTIAL+4:	LUT_DATA	<=	9'h080;
		//	Line 1
		LCD_LINE1+0:	LUT_DATA	<=	9'h152;	//	Welcome to the
		LCD_LINE1+1:	LUT_DATA	<=	9'h145;
		LCD_LINE1+2:	LUT_DATA	<=	9'h144;
		LCD_LINE1+3:	LUT_DATA	<=	9'h120;
		LCD_LINE1+4:	LUT_DATA	<=	9'h142;
		LCD_LINE1+5:	LUT_DATA	<=	9'h120;
		LCD_LINE1+6:	LUT_DATA	<=	9'h120;
		LCD_LINE1+7:	LUT_DATA	<=	9'h120;
		LCD_LINE1+8:	LUT_DATA	<=	9'h120;
		LCD_LINE1+9:	LUT_DATA	<=	9'h147;
		LCD_LINE1+10:	LUT_DATA	<=	9'h152;
		LCD_LINE1+11:	LUT_DATA	<=	9'h145;
		LCD_LINE1+12:	LUT_DATA	<=	9'h145;
		LCD_LINE1+13:	LUT_DATA	<=	9'h14E;
		LCD_LINE1+14:	LUT_DATA	<=	9'h120;
		LCD_LINE1+15:	LUT_DATA	<=	9'h142;
		//	Change Line
		LCD_CH_LINE:	LUT_DATA	<=	9'h0C0;
		//	Line 2
		LCD_LINE2+0:	LUT_DATA	<=	9'h120;	//	Terasic DE2i-150 T
		LCD_LINE2+1:	LUT_DATA	<=	9'h120;	// e
		LCD_LINE2+2:	LUT_DATA	<=	9'h120;  // r
		LCD_LINE2+3:	LUT_DATA	<=	count_n4;  // a
		LCD_LINE2+4:	LUT_DATA	<=	count_d4;  // s
		LCD_LINE2+5:	LUT_DATA	<=	9'h120; // i
		LCD_LINE2+6:	LUT_DATA	<=	9'h120;  // c
		LCD_LINE2+7:	LUT_DATA	<=	9'h120;  // 
		LCD_LINE2+8:	LUT_DATA	<=	9'h120;  // D
		LCD_LINE2+9:	LUT_DATA	<=	9'h120;  // E
		LCD_LINE2+10:	LUT_DATA	<=	9'h120;  // 2
		LCD_LINE2+11:	LUT_DATA	<=	9'h120;  // i
		LCD_LINE2+12:	LUT_DATA	<=	9'h120;  // -
		LCD_LINE2+13:	LUT_DATA	<=	9'h120;  // 1
		LCD_LINE2+14:	LUT_DATA	<=	count_n3;  // 5
		LCD_LINE2+15:	LUT_DATA	<=	count_d3;  // 0
		default:		LUT_DATA	<=	9'h120;
		endcase
	end
end

LCD_Controller 		u0	(	//	Host Side
							.iDATA(mLCD_DATA),
							.iRS(mLCD_RS),
							.iStart(mLCD_Start),
							.oDone(mLCD_Done),
							.iCLK(iCLK),
							.iRST_N(iRST_N),
							//.iRST_N(iRST_N),
							//	LCD Interface
							.LCD_DATA(LCD_DATA),
							.LCD_RW(LCD_RW),
							.LCD_EN(LCD_EN),
							.LCD_RS(LCD_RS)
							);

endmodule